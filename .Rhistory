# ---- packages ----
pkg_needed <- c("shiny","plotly","DT","bslib","readr","dplyr","tidyr","lubridate","scales","cachem")
to_install <- setdiff(pkg_needed, rownames(installed.packages()))
if(length(to_install)) install.packages(to_install, repos = "https://cran.rstudio.com/")
lapply(pkg_needed, require, character.only = TRUE)
# ---- data loader (CSV optionnel ou génération) ----
load_finance_data <- function() {
csv_path <- file.path("data","finances.csv")
if (file.exists(csv_path)) {
df <- readr::read_csv(csv_path, show_col_types = FALSE)
} else {
set.seed(42)
dates <- seq(as.Date("2024-01-01"), by="month", length.out=24)
regions <- c("EMEA","AMER","APAC")
categories <- c("SaaS","Services","Hardware")
products <- c("Alpha","Beta","Gamma","Delta")
base <- expand.grid(date = dates, region = regions, category = categories, product = products)
base <- base |>
dplyr::mutate(
revenue = round(runif(dplyr::n(), 5000, 55000) * (1 + as.numeric(format(date, "%m"))/24),0),
expenses = round(revenue * runif(dplyr::n(), 0.45, 0.85), 0)
)
df <- base |> dplyr::mutate(gp = revenue - expenses)
}
df |>
dplyr::mutate(
date = as.Date(date),
year = lubridate::year(date),
month = lubridate::floor_date(date, "month")
) |>
dplyr::relocate(year, month, .after = date)
}
fin_data <- load_finance_data()
# ---- helpers & cache ----
cache <- cachem::cache_mem()
fmt_eur <- label_dollar(prefix = "", big.mark = " ", suffix = " €", accuracy = 1)
fmt_pct <- label_percent(accuracy = 0.1)
kpis <- function(df) {
df |>
summarise(
Revenue = sum(revenue, na.rm=TRUE),
Expenses = sum(expenses, na.rm=TRUE),
GP = sum(gp, na.rm=TRUE),
Margin = ifelse(sum(revenue)>0, sum(gp)/sum(revenue), NA_real_)
)
}
# ---- THEME (bslib) ----
light_theme <- bslib::bs_theme(version = 5, bootswatch = "flatly",
primary = "#2c3e50", base_font = bslib::font_google("Inter"))
dark_theme  <- bslib::bs_theme(version = 5, bootswatch = "darkly",
primary = "#4FC3F7", base_font = bslib::font_google("Inter"))
# ---- UI ----
ui <- bslib::page_navbar(
title = div(img(src = "logo.png", height = "28", onerror="this.style.display='none'"), "Finance Dashboard"),
id = "nav",
theme = light_theme,
header = tags$head(
tags$link(rel="stylesheet", href="styles.css"),
tags$script(src="app.js")
),
sidebar = bslib::sidebar(
open = "open",
h5("Filtres"),
dateRangeInput("dater", "Période", start = min(fin_data$date), end = max(fin_data$date)),
selectInput("region", "Région", choices = c("Toutes", sort(unique(fin_data$region))), selected = "Toutes"),
selectInput("category", "Catégorie", choices = c("Toutes", sort(unique(fin_data$category))), selected = "Toutes"),
selectInput("product", "Produit", choices = c("Tous", sort(unique(fin_data$product))), selected = "Tous"),
checkboxInput("darkmode", "Mode sombre", value = FALSE),
hr(),
downloadButton("dl_csv", "Télécharger CSV"),
width = 320
),
# --- Onglet Dashboard ---
bslib::nav_panel(
"Dashboard",
fluidRow(
# KPI cards
column(3, div(class="kpi", h6("Revenus"), textOutput("kpi_rev"))),
column(3, div(class="kpi", h6("Dépenses"), textOutput("kpi_exp"))),
column(3, div(class="kpi", h6("Marge brute"), textOutput("kpi_gp"))),
column(3, div(class="kpi", h6("Taux de marge"), textOutput("kpi_margin")))
),
br(),
fluidRow(
column(8, plotlyOutput("ts_revenue", height = "360px")),
column(4, plotlyOutput("bar_region", height = "360px"))
),
br(),
fluidRow(
column(6, plotlyOutput("stack_category", height = "340px")),
column(6, plotlyOutput("top_products", height = "340px"))
)
),
# --- Onglet Transactions ---
bslib::nav_panel(
"Transactions",
div(class="tbl-card",
DTOutput("tbl"),
br(),
div(style="display:flex; gap:.5rem; flex-wrap:wrap",
downloadButton("dl_view", "Exporter la vue"),
actionButton("reset_filters","Réinitialiser les filtres"))
)
),
# --- Onglet Paramètres ---
bslib::nav_panel(
"Paramètres",
h5("Astuces"),
tags$ul(
tags$li("Glissez la souris sur les graphiques pour zoomer."),
tags$li("Cliquez sur les légendes Plotly pour masquer/afficher des séries."),
tags$li("Le bouton ‘Exporter la vue’ télécharge le sous-ensemble filtré.")
),
h5("Infos"),
verbatimTextOutput("about")
)
)
# ---- SERVER ----
server <- function(input, output, session) {
# Persist theme via JS localStorage
observe({
session$sendCustomMessage("toggle-dark", list(enable = isTRUE(input$darkmode)))
bslib::bs_themer_set(session, if (isTRUE(input$darkmode)) dark_theme else light_theme)
})
# filters
r_filtered <- reactive({
key <- paste(input$dater, input$region, input$category, input$product, sep="|")
cache$get(key) %||% {
df <- fin_data |>
dplyr::filter(date >= input$dater[1], date <= input$dater[2])
if (input$region  != "Toutes") df <- df |> dplyr::filter(region == input$region)
if (input$category!= "Toutes") df <- df |> dplyr::filter(category == input$category)
if (input$product != "Tous")   df <- df |> dplyr::filter(product == input$product)
cache$set(key, df); df
}
})
# KPIs
observe({
kp <- kpis(r_filtered())
output$kpi_rev    <- renderText(fmt_eur(kp$Revenue))
output$kpi_exp    <- renderText(fmt_eur(kp$Expenses))
output$kpi_gp     <- renderText(fmt_eur(kp$GP))
output$kpi_margin <- renderText(fmt_pct(kp$Margin))
})
# time series revenue
output$ts_revenue <- renderPlotly({
df <- r_filtered() |>
group_by(month) |>
summarise(Revenue = sum(revenue), .groups="drop")
plot_ly(df, x = ~month, y = ~Revenue, type = "scatter", mode = "lines+markers",
hovertemplate = paste0("%{x|%b %Y}<br>Revenus: %{y:,} €<extra></extra>")) |>
layout(title = "Revenus mensuels", yaxis = list(tickformat = ",.0f"))
})
# bar by region
output$bar_region <- renderPlotly({
df <- r_filtered() |>
group_by(region) |>
summarise(Revenue = sum(revenue), GP = sum(gp), .groups="drop")
plot_ly(df, x = ~region, y = ~Revenue, type = "bar", name="Revenus") |>
add_trace(y = ~GP, type = "bar", name="Marge brute") |>
layout(barmode = "group", title = "Par région", yaxis = list(tickformat=",.0f"))
})
# stacked by category over time
output$stack_category <- renderPlotly({
df <- r_filtered() |>
group_by(month, category) |>
summarise(Revenue = sum(revenue), .groups="drop")
plot_ly(df, x=~month, y=~Revenue, color=~category, type="bar") |>
layout(barmode="stack", title="Revenus par catégorie (stack)")
})
# top products
output$top_products <- renderPlotly({
df <- r_filtered() |>
group_by(product) |>
summarise(Revenue = sum(revenue), .groups="drop") |>
arrange(desc(Revenue)) |>
slice_head(n=10)
plot_ly(df, x=~Revenue, y=~reorder(product, Revenue), type="bar", orientation="h") |>
layout(title="Top produits", xaxis=list(tickformat=",.0f"), yaxis=list(title=""))
})
# table
output$tbl <- renderDT({
DT::datatable(
r_filtered() |> arrange(desc(date)),
options = list(pageLength = 10, scrollX = TRUE, dom = "Bfrtip"),
filter = "top", rownames = FALSE
)
})
# downloads
output$dl_csv <- downloadHandler(
filename = function() paste0("export_finances_", Sys.Date(), ".csv"),
content = function(file) readr::write_csv(fin_data, file)
)
output$dl_view <- downloadHandler(
filename = function() paste0("export_vue_", Sys.Date(), ".csv"),
content = function(file) readr::write_csv(r_filtered(), file)
)
# reset filters
observeEvent(input$reset_filters, {
updateSelectInput(session, "region", selected="Toutes")
updateSelectInput(session, "category", selected="Toutes")
updateSelectInput(session, "product", selected="Tous")
updateDateRangeInput(session, "dater", start=min(fin_data$date), end=max(fin_data$date))
})
# about
output$about <- renderText({
paste0("Observations: ", nrow(fin_data),
"\nPériode: ", format(min(fin_data$date), "%Y-%m-%d"), " → ", format(max(fin_data$date), "%Y-%m-%d"),
"\nColonnes: ", paste(colnames(fin_data), collapse=", "))
})
}
shinyApp(ui, server)
# ---- packages ----
pkg_needed <- c("shiny","plotly","DT","bslib","readr","dplyr","tidyr","lubridate","scales","cachem")
to_install <- setdiff(pkg_needed, rownames(installed.packages()))
if(length(to_install)) install.packages(to_install, repos = "https://cran.rstudio.com/")
lapply(pkg_needed, require, character.only = TRUE)
# ---- data loader (CSV optionnel ou génération) ----
load_finance_data <- function() {
csv_path <- file.path("data","finances.csv")
if (file.exists(csv_path)) {
df <- readr::read_csv(csv_path, show_col_types = FALSE)
} else {
set.seed(42)
dates <- seq(as.Date("2024-01-01"), by="month", length.out=24)
regions <- c("EMEA","AMER","APAC")
categories <- c("SaaS","Services","Hardware")
products <- c("Alpha","Beta","Gamma","Delta")
base <- expand.grid(date = dates, region = regions, category = categories, product = products)
base <- base |>
dplyr::mutate(
revenue = round(runif(dplyr::n(), 5000, 55000) * (1 + as.numeric(format(date, "%m"))/24),0),
expenses = round(revenue * runif(dplyr::n(), 0.45, 0.85), 0)
)
df <- base |> dplyr::mutate(gp = revenue - expenses)
}
df |>
dplyr::mutate(
date = as.Date(date),
year = lubridate::year(date),
month = lubridate::floor_date(date, "month")
) |>
dplyr::relocate(year, month, .after = date)
}
fin_data <- load_finance_data()
# ---- helpers & cache ----
cache <- cachem::cache_mem()
fmt_eur <- label_dollar(prefix = "", big.mark = " ", suffix = " €", accuracy = 1)
fmt_pct <- label_percent(accuracy = 0.1)
kpis <- function(df) {
df |>
summarise(
Revenue = sum(revenue, na.rm=TRUE),
Expenses = sum(expenses, na.rm=TRUE),
GP = sum(gp, na.rm=TRUE),
Margin = ifelse(sum(revenue)>0, sum(gp)/sum(revenue), NA_real_)
)
}
# ---- THEME (bslib) ----
light_theme <- bslib::bs_theme(version = 5, bootswatch = "flatly",
primary = "#2c3e50", base_font = bslib::font_google("Inter"))
dark_theme  <- bslib::bs_theme(version = 5, bootswatch = "darkly",
primary = "#4FC3F7", base_font = bslib::font_google("Inter"))
# ---- UI ----
ui <- bslib::page_navbar(
title = div(img(src = "logo.png", height = "28", onerror="this.style.display='none'"), "Finance Dashboard"),
id = "nav",
theme = light_theme,
header = tags$head(
tags$link(rel="stylesheet", href="styles.css"),
tags$script(src="app.js")
),
sidebar = bslib::sidebar(
open = "open",
h5("Filtres"),
dateRangeInput("dater", "Période", start = min(fin_data$date), end = max(fin_data$date)),
selectInput("region", "Région", choices = c("Toutes", sort(unique(fin_data$region))), selected = "Toutes"),
selectInput("category", "Catégorie", choices = c("Toutes", sort(unique(fin_data$category))), selected = "Toutes"),
selectInput("product", "Produit", choices = c("Tous", sort(unique(fin_data$product))), selected = "Tous"),
checkboxInput("darkmode", "Mode sombre", value = FALSE),
hr(),
downloadButton("dl_csv", "Télécharger CSV"),
width = 320
),
# --- Onglet Dashboard ---
bslib::nav_panel(
"Dashboard",
fluidRow(
# KPI cards
column(3, div(class="kpi", h6("Revenus"), textOutput("kpi_rev"))),
column(3, div(class="kpi", h6("Dépenses"), textOutput("kpi_exp"))),
column(3, div(class="kpi", h6("Marge brute"), textOutput("kpi_gp"))),
column(3, div(class="kpi", h6("Taux de marge"), textOutput("kpi_margin")))
),
br(),
fluidRow(
column(8, plotlyOutput("ts_revenue", height = "360px")),
column(4, plotlyOutput("bar_region", height = "360px"))
),
br(),
fluidRow(
column(6, plotlyOutput("stack_category", height = "340px")),
column(6, plotlyOutput("top_products", height = "340px"))
)
),
# --- Onglet Transactions ---
bslib::nav_panel(
"Transactions",
div(class="tbl-card",
DTOutput("tbl"),
br(),
div(style="display:flex; gap:.5rem; flex-wrap:wrap",
downloadButton("dl_view", "Exporter la vue"),
actionButton("reset_filters","Réinitialiser les filtres"))
)
),
# --- Onglet Paramètres ---
bslib::nav_panel(
"Paramètres",
h5("Astuces"),
tags$ul(
tags$li("Glissez la souris sur les graphiques pour zoomer."),
tags$li("Cliquez sur les légendes Plotly pour masquer/afficher des séries."),
tags$li("Le bouton ‘Exporter la vue’ télécharge le sous-ensemble filtré.")
),
h5("Infos"),
verbatimTextOutput("about")
)
)
# ---- SERVER ----
server <- function(input, output, session) {
# Persist theme via JS localStorage
observe({
session$sendCustomMessage("toggle-dark", list(enable = isTRUE(input$darkmode)))
bslib::bs_themer_set(session, if (isTRUE(input$darkmode)) dark_theme else light_theme)
})
# filters
r_filtered <- reactive({
key <- paste(input$dater, input$region, input$category, input$product, sep="|")
cache$get(key) %||% {
df <- fin_data |>
dplyr::filter(date >= input$dater[1], date <= input$dater[2])
if (input$region  != "Toutes") df <- df |> dplyr::filter(region == input$region)
if (input$category!= "Toutes") df <- df |> dplyr::filter(category == input$category)
if (input$product != "Tous")   df <- df |> dplyr::filter(product == input$product)
cache$set(key, df); df
}
})
# KPIs
observe({
kp <- kpis(r_filtered())
output$kpi_rev    <- renderText(fmt_eur(kp$Revenue))
output$kpi_exp    <- renderText(fmt_eur(kp$Expenses))
output$kpi_gp     <- renderText(fmt_eur(kp$GP))
output$kpi_margin <- renderText(fmt_pct(kp$Margin))
})
# time series revenue
output$ts_revenue <- renderPlotly({
df <- r_filtered() |>
group_by(month) |>
summarise(Revenue = sum(revenue), .groups="drop")
plot_ly(df, x = ~month, y = ~Revenue, type = "scatter", mode = "lines+markers",
hovertemplate = paste0("%{x|%b %Y}<br>Revenus: %{y:,} €<extra></extra>")) |>
layout(title = "Revenus mensuels", yaxis = list(tickformat = ",.0f"))
})
# bar by region
output$bar_region <- renderPlotly({
df <- r_filtered() |>
group_by(region) |>
summarise(Revenue = sum(revenue), GP = sum(gp), .groups="drop")
plot_ly(df, x = ~region, y = ~Revenue, type = "bar", name="Revenus") |>
add_trace(y = ~GP, type = "bar", name="Marge brute") |>
layout(barmode = "group", title = "Par région", yaxis = list(tickformat=",.0f"))
})
# stacked by category over time
output$stack_category <- renderPlotly({
df <- r_filtered() |>
group_by(month, category) |>
summarise(Revenue = sum(revenue), .groups="drop")
plot_ly(df, x=~month, y=~Revenue, color=~category, type="bar") |>
layout(barmode="stack", title="Revenus par catégorie (stack)")
})
# top products
output$top_products <- renderPlotly({
df <- r_filtered() |>
group_by(product) |>
summarise(Revenue = sum(revenue), .groups="drop") |>
arrange(desc(Revenue)) |>
slice_head(n=10)
plot_ly(df, x=~Revenue, y=~reorder(product, Revenue), type="bar", orientation="h") |>
layout(title="Top produits", xaxis=list(tickformat=",.0f"), yaxis=list(title=""))
})
# table
output$tbl <- renderDT({
DT::datatable(
r_filtered() |> arrange(desc(date)),
options = list(pageLength = 10, scrollX = TRUE, dom = "Bfrtip"),
filter = "top", rownames = FALSE
)
})
# downloads
output$dl_csv <- downloadHandler(
filename = function() paste0("export_finances_", Sys.Date(), ".csv"),
content = function(file) readr::write_csv(fin_data, file)
)
output$dl_view <- downloadHandler(
filename = function() paste0("export_vue_", Sys.Date(), ".csv"),
content = function(file) readr::write_csv(r_filtered(), file)
)
# reset filters
observeEvent(input$reset_filters, {
updateSelectInput(session, "region", selected="Toutes")
updateSelectInput(session, "category", selected="Toutes")
updateSelectInput(session, "product", selected="Tous")
updateDateRangeInput(session, "dater", start=min(fin_data$date), end=max(fin_data$date))
})
# about
output$about <- renderText({
paste0("Observations: ", nrow(fin_data),
"\nPériode: ", format(min(fin_data$date), "%Y-%m-%d"), " → ", format(max(fin_data$date), "%Y-%m-%d"),
"\nColonnes: ", paste(colnames(fin_data), collapse=", "))
})
}
shinyApp(ui, server)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
cls
runApp()
runApp()
